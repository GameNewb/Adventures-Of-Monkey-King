<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

menu[0] = "Start";
menu[1] = "Quit";

hspace = 96; //Hspace of each menu
vspace = 48; //Vspace of each menu
mpos = 0; //Cursor

alarm[0] = 3;

audio_em = audio_emitter_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate background

switch(background_index)
{
    case bg_1:
        background_index = bg_2;
        break;
    case bg_2:
        background_index = bg_3;
        break;
    case bg_3:
        background_index = bg_4;
        break;
    case bg_4:
        background_index = bg_5;
        break;
    case bg_5:
        background_index = bg_6;
        break;
    case bg_6:
        background_index = bg_7;
        break;
    case bg_7:
        background_index = bg_8;
        break;
    case bg_8:
        background_index = bg_9;
        break;
    case bg_9:
        background_index = bg_10;
        break;
    case bg_10:
        background_index = bg_11;
        break;
    case bg_11:
        background_index = bg_12;
        break;
    case bg_12:
        background_index = bg_13;
        break;
    case bg_13:
        background_index = bg_14;
        break;
    case bg_14:
        background_index = bg_15;
        break;
    case bg_15:
        background_index = bg_16;
        break;
    case bg_16:
        background_index = bg_17;
        break;
    case bg_17:
        background_index = bg_18;
        break;
    case bg_18:
        background_index = bg_19;
        break;
    case bg_19:
        background_index = bg_20;
        break;
    case bg_20:
        background_index = bg_21;
        break;
    case bg_21:
        background_index = bg_22;
        break;
    case bg_22:
        background_index = bg_23;
        break;
    case bg_23:
        background_index = bg_24;
        break;
    case bg_24:
        background_index = bg_25;
        break;
    case bg_25:
        background_index = bg_26;
        break;
    case bg_26:
        background_index = bg_27;
        break;
    case bg_27:
        background_index = bg_28;
        break;
    case bg_28:
        background_index = bg_29;
        break;
    case bg_29:
        background_index = bg_30;
        break;
    default:
        background_index = bg_1;
        break;
}

alarm[0] = 2.75;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup event

var mov = 0; //Move mouse cursor
mov -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), 0);
mov += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), 0);
    
if(mov != 0)
{
    mpos += mov; //Add to mouse position
    
    //Wrapper
    if(mpos &lt; 0) 
    {
        mpos = array_length_1d(menu) - 1;
    }
    
    //Greater than array length
    if(mpos &gt; array_length_1d(menu) - 1)
    {
        mpos = 0;
    }
}

//For enter
var push;
push = max
(
    keyboard_check_released(vk_enter), 
    keyboard_check_released(vk_shift), 
    keyboard_check_released(vk_space), 
    0);
    
if(push == 1)
{
    scr_menu();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play background music

//Create background audio
audio_em = audio_emitter_create();
audio_emitter_gain(audio_em, .5); //50% of original volume
audio_play_sound_on(audio_em, snd_rainbows, true, 10);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the menu

draw_set_halign(fa_middle);
draw_set_valign(fa_middle);
draw_set_font(fnt_menu);
draw_set_color(c_yellow);

var i;
for(i = 0; i &lt; array_length_1d(menu); i++)
{
    text_outline(x + hspace, y+16 + (i * vspace), string(menu[i]), c_yellow, c_black);
}

draw_sprite(sprite_index, 0, x+8, y+mpos * vspace);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
